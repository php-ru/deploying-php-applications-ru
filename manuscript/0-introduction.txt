# Введение

## Предыстория

В настоящее время сообщество PHP находится в интересной фазе, и оно уже давно отстаёт от более традиционных методов разработки программного обеспечения. Практики, которые более или менее рассматриваются как нечто данное в других сообществах: непрерывная интеграция, управление пакетами, внедрение зависимости и применение принципов объектно-ориентированного программирования, — это далеко не исчерпывающий список. Но начиная с PHP 5.3 больше нет никаких оправданий тому, почему вы не можете писать современный и чистый код. Сообщество отреагировало на подобное, и многие люди сделали шаг вперёд в целях поддержки этого путём обучения и создания инструментов для выполнения перечисленных видов практик.

Но мы, похоже, все ещё забываем о развёртывании (далее — деплой), и я чувствую, что пришло время вынести этот вопрос на обсуждение. Существует множество отличных инструментов и сервисов, которые помогут вам с деплоем, но только несколько ресурсов доступно о том как настравивать, поддерживать и оптимизизровать процесс деплоя.

Деплой — это не просто отправка изменений на продакшен-сервер, а важная часть [процесса разработки программного обеспечения](https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81_%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE_%D0%BE%D0%B1%D0%B5%D1%81%D0%BF%D0%B5%D1%87%D0%B5%D0%BD%D0%B8%D1%8F). Вам нужно подумать о каждом шаге, учитывая при этом особенности приложения, ведь каждое приложение уникально. Особенно важен хорошо настроенный процесс деплоя, когда вы работаете в команде. Команда должна работать таким образом, чтобы процесс оказался полезным для всех заинтересованных сторон.

У каждого приложения есть жизненный цикл, который процесс деплоя поддерживает и для которого является необходимым. Вы хотите поддерживать приложение, внедрять новый функционал и исправлять баги не имея при этом постоянных головных болей. Вы должны бы были управлять своими ветками, заливать код в репозиторий, прогонять тесты, мигрировать базу данных и деплоить изменения быстро и уверенно. Со слаженным и настроенным процессом деплоя это будет как лёгкое дуновение ветра. А если при этом процесс будет позволять быстро и легко откатывать изменения назад, то деплоить изменения станет ещё спокойнее.

В мире все более гибкой разработки программного обеспечения возможность деплоя имеет важное значение. Циклы выпуска становятся всё короче и короче, а некоторые организации выжимают максимум и доходят до [непрерывной поставки](http://en.wikipedia.org/wiki/Continuous_delivery). В среде с короткими циклами выпуска важность процесса деплоя возрастает. Невозможность деплоя или достаточно быстрого отката может привести к замедлению всего вашего процесса разработки.

## Для кого эта книга

Вы уже знакомы с PHP и не боитесь командной строки. Но вы также можете быть менеджером команды разработчиков программного обеспечения, которая делает деплой на регулярной основе.

Наследие — это не только проблема кода, но и проблема процесса также. Вы хотите оптимизировать процесс деплоя или отказаться от текущего и начать все сначала? Тогда эта книга для вас.

## За пределами книги

Подготовку сервера (server provisioning) я считаю, возможно, самой важной частью деплоя вашего приложения, но это слишком большая тема для этой книги. Это, без сомнения, может быть отдельной книгой (и, возможно, будет?). Я также не хочу, чтобы она фокусировалась на каком-либо фреймворке или инструменте, и сохранила содержание и название как можно более общим, а не была чем-то вроде *Деплой PHP-приложения в Amazon Web Services с помощью Chef*.

Используемые средства и команды будут находиться за рамками рассмотрения в книге, если это не средство деплоя (тогда у него будет собственный выделенный раздел). Я предоставлю примеры с использованием Git, Composer, Grunt, PHPUnit и различными другими инструментами, однако если вы хотите узнать больше об этих инструментах, есть огромное количество книг, скринкастов и постов в блоге, кроме того, не забывайте про вашего верного друга Google.

## Предположения

Я знаю, что нехорошо делать предположения о людях или программном обеспечении. Но я все равно буду делать это в некоторой степени в этой книге. Я сделаю их, когда я подойду к примерам, но я не буду судить вас или ваше приложение каким-либо образом.

#### Где делать деплой

Вам понадобится среда хостинга, которая будет находится под вашим контролем. Если вы не можете установить программное обеспечение или выполнить команды, это создаст препятствие к построению процесса деплоя. Будь то хостинг, размещение вашего собственного сервера или VPS — это не имеет значения, но для использования всего того, что описано в этой книге вам нужно иметь что-либо из перечисленного с доступом, позволяющим устанавливать программное обеспечение, изменять конфигурацию и т.д.

#### Git

В основе некоторых обсуждаемых тем будет использоваться Git в качестве системы контроля версий. Почему именно он? Потому что я думаю, что он лучше всего подходит для хорошего процесса деплоя. В книге есть глава про систему контроля версий Git и о модели ветвления для слаженного процесса деплоя, и эту главу скорее лучше было бы назвать *системой управления версиями Git*. Но я оставлю это имя без Git, потому что в этой главе объясняются много чего такого, что применимо и к другим системам управления версиями. Помимо Git, я работал с Subversion и Perforce, но когда я перешёл на Git и начал включать его в свой рабочий процесс, я больше никогда не оглядывался назад.

#### Бэкенд и фронтенд

Также будет предположение о том, что ваше приложение не ограничивается бэкенд-частью. Если ваше приложение представляет собой REST API, например, без фронтенда, каким бы он ни был, это не имеет значения. Я приведу некоторые распространённые примеры того, как управлять сборками вашего фронтенда, однако все используемые команды для этого будут выбраны произвольно.

## Об авторе

Я разрабатываю приложения PHP уже более 10 лет. За это время я разработал и задеплоил большое количество приложений. Масштаб этих приложений был от нескольких сотен пользователей до более чем 250 миллионов пользователей. В настоящее время я работаю в качестве своего рода независимого консультанта, ориентированного на веб-архитектуру, в то время как в остальное время занимаюсь своими проектами.

Я один из двух соорганизаторов для митап-группы [Laravel Stockholm](http://www.meetup.com/Laravel-Stockholm/), пытаясь привлечь некоторых хороших людей к обсуждению концепций Laravel и PHP в целом. Я вношу вклад в проекты с открытым исходным кодом, насколько это возможно. В основном это разработка и поддержка [Git Pretty Stats](https://github.com/modess/git-pretty-stats), инструмент для размещения на своём сервере для сбора статистики и построения графиков Git-репозиториев.

О, между прочим, я из Стокгольма, что в Швеции. Поэтому я пишу книгу на своём втором языке, и я был бы признателен за всю помощь, которую я могу получить, когда дело доходит до написания и грамматики. Если вы что-то нашли, создайте ишью в [этом репозитории](https://github.com/modess/deploying-php-applications) или сделайте его форк, исправьте и отправьте мне пулреквест. Спасибо!

## Примеры кода

В [репозитории на GitHub](https://github.com/modess/deploying-php-applications) вы можете найти примеры кода, отсортированные по главам. Любой существенный кусок кода, используемый в книге, доступен там для справки и использования.

## Благодарности

Моему другу и талантливому и 	непревзойдённому **Йоакиму Янгу (Joakim Unge)** за потрясающую обложку книги. Посмотрите на только, это ведь чёртовый ракетный корабль! Вы можете найти его портфолио по URL-адресу [www.ashbagraphics.com](http://www.ashbagraphics.com).

---

Моей сестре **Дженни Модесс (Jenny Modess)**, одарённому копирайтеру, за корректуру с нетехнической точки зрения. Держи мою орфографию, грамматику и повествование всегда под контролем!
